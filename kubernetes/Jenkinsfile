pipeline {
	agent any
	
	environment {
	   registryCredential = 'dockerhub'
	   registry = 'satnamwaheguru/vproappdock'
	}
	stages {
      stage('Build') {
      steps {                
                sh 'mvn install -DskipTests'
            }
            post {
                success {
                  echo "archive artifacts now....."
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }  
	   stage('TEST') {
	     steps {
	       sh 'mvn test'
	     }
	   }
       stage('Integration TEST') {
	     steps {
	       sh 'mvn verify -DskipUnitRests'
	     }
	   }
	   stage(' Code Analysis with Checkstyle') {
	     steps {
	       sh 'mvn checkstyle:checkstyle'
	     }
	     post {
	       success {
	         echo 'generated Analysis Result'
	       }
	     }
	   }
	   stage('Build And Sonar Analysis') {
            environment {
                scannerHome = tool 'mysonarscanner4'
            }
            steps {
                withSonarQubeEnv('sonar-pro') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }

                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
	   stage('Quality Gate') {
            steps {
                timeout (time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
	        }
	     }
	   }
       stage('Build App Image') {
          steps {
       
            script {
              dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
	       }
	     }
	   }
	   stage('Upload App Image') {
          steps{
            script {
              docker.withRegistry( vprofileRegistry, registryCredential ) {
                dockerImage.push("V$BUILD_NUMBER")
                dockerImage.push('latest')
	         }
	       }
	     }
	   }
       stage('Remove Unused Docker Image ') {
         steps {
            sh "docker rmi $registry:V$BUILD_NUMBER"
         }
       }
       stage('Kubernetes Deploy') {
        agent {label 'KOPS'}
        steps {
            sh "helm upgrade --install --force vprofile-stack helm/vprofilecharts --set appimage=${registry}:V${BUILD_NUMBER} --namespace prod"
         }
       }
    }
}       